/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bodyfitness.quadros.paineis;

import bodyfitness.controlador.cadastro.CadastroCliente;
import bodyfitness.pessoas.cliente.Cliente;
import java.util.List;
import javax.swing.JTable;

/**
 *
 * @author Luan Bodner do Rosário <luan.rosario.bodner@gmail.com>
 */
public class PainelConsultaCliente extends javax.swing.JFrame {

    /**
     * Creates new form ConsultaCliente
     */
    public PainelConsultaCliente() {
        initComponents();
        //this.buscaTable = new JTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        consultaPanel = new javax.swing.JPanel();
        headerLabel = new javax.swing.JLabel();
        buscaLabel = new javax.swing.JLabel();
        criterioLabel = new javax.swing.JLabel();
        buscaTField = new javax.swing.JTextField();
        criterioCBox = new javax.swing.JComboBox<>();
        buscarButton = new javax.swing.JButton();
        buscaPane = new javax.swing.JScrollPane();
        buscaTable = new javax.swing.JTable();
        image = new javax.swing.JLabel();

        jLabel4.setText("jLabel4");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        consultaPanel.setLayout(null);

        headerLabel.setFont(new java.awt.Font("Cantarell", 0, 36)); // NOI18N
        headerLabel.setForeground(new java.awt.Color(254, 254, 254));
        headerLabel.setText("Consulta de Clientes");
        consultaPanel.add(headerLabel);
        headerLabel.setBounds(340, 20, 350, 50);

        buscaLabel.setFont(new java.awt.Font("Cantarell", 0, 24)); // NOI18N
        buscaLabel.setForeground(new java.awt.Color(254, 254, 254));
        buscaLabel.setText("Busca :");
        consultaPanel.add(buscaLabel);
        buscaLabel.setBounds(50, 170, 80, 50);

        criterioLabel.setFont(new java.awt.Font("Cantarell", 0, 24)); // NOI18N
        criterioLabel.setForeground(new java.awt.Color(254, 254, 254));
        criterioLabel.setText("Critério :");
        consultaPanel.add(criterioLabel);
        criterioLabel.setBounds(50, 90, 100, 50);

        buscaTField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscaTFieldActionPerformed(evt);
            }
        });
        consultaPanel.add(buscaTField);
        buscaTField.setBounds(160, 170, 780, 50);

        criterioCBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "todos", "nome", "adimplentes", "inadimplentes", "peso ideal", "abaixo do peso", "sobrepeso", "obesidade 1", "obesidade 2", "obesidade 3" }));
        criterioCBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                criterioCBoxActionPerformed(evt);
            }
        });
        consultaPanel.add(criterioCBox);
        criterioCBox.setBounds(160, 90, 600, 50);

        buscarButton.setText("Buscar");
        buscarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarButtonActionPerformed(evt);
            }
        });
        consultaPanel.add(buscarButton);
        buscarButton.setBounds(800, 90, 140, 50);

        buscaTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Nome", "IMC", "S.Financeira", "Idade"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        buscaTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buscaTableMouseClicked(evt);
            }
        });
        buscaPane.setViewportView(buscaTable);

        consultaPanel.add(buscaPane);
        buscaPane.setBounds(20, 250, 960, 380);

        image.setIcon(new javax.swing.ImageIcon(getClass().getResource("/índice.jpg"))); // NOI18N
        image.setText("jLabel1");
        consultaPanel.add(image);
        image.setBounds(-50, -70, 1971, 1080);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(consultaPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 1000, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(consultaPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 650, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buscaTFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscaTFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_buscaTFieldActionPerformed

    private void buscarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarButtonActionPerformed
        // TODO add your handling code here:
        CadastroCliente cadastro = new CadastroCliente();
        //this.buscaTField.setEnabled(false);
        if (criterioCBox.getSelectedItem().toString().equals("todos")) {
            List<Cliente> clientes = cadastro.dao.consultarTodos();
            String[][] resultado = new String[clientes.size()][5];
            System.out.println(clientes.get(0).getNome());
            System.out.println(clientes.get(0).getId());
            //System.out.println(clientes.get(0).getIdade());
            //  System.out.println(clientes.get(0).getCondicionamentoFisico().getComposicaoCorporal().getImc());
            for (int i = 0; i < clientes.size(); i++) {
                String imc;

                //imc = "--";

                try {
                    imc = clientes.get(i).getCondicionamentoFisico().getComposicaoCorporal().getImc().toString();
                } catch (Exception e) {
                    System.out.println(e.getMessage());
                    imc = "--";
                }

                resultado[i] = new String[]{clientes.get(i).getId().toString(), clientes.get(i).getNome(), imc, clientes.get(i).getSituacaoFinanceira(), clientes.get(i).getIdade().toString()};
            }
            this.buscaTable.setModel(new javax.swing.table.DefaultTableModel(
                    resultado,
                    new String[]{
                        "ID", "Nome", "IMC", "S.Financeira", "Idade"
                    }
            ) {
                boolean[] canEdit = new boolean[]{
                    false, false, false, false, false
                };

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit[columnIndex];
                }
            });

        } else if (this.criterioCBox.getSelectedItem().toString().equals("nome")) {
            List<Cliente> clientes = cadastro.dao.consultarPorNome(this.buscaTField.getText());
            String[][] resultado = new String[clientes.size()][5];
            String imc = "--";
            for (int i = 0; i < clientes.size(); i++) {
                try {
                    imc = clientes.get(i).getCondicionamentoFisico().getComposicaoCorporal().getImc().toString();
                }catch(Exception e) {
                    System.out.println(e.getMessage());
                    imc = "--";
                }
                resultado[i] = new String[]{clientes.get(i).getId().toString(), clientes.get(i).getNome(), imc, clientes.get(i).getSituacaoFinanceira(), clientes.get(i).getIdade().toString()};
            }
            this.buscaTable.setModel(new javax.swing.table.DefaultTableModel(
                    resultado,
                    new String[]{
                        "ID", "Nome", "IMC", "S.Financeira", "Idade"
                    }
            ) {
                boolean[] canEdit = new boolean[]{
                    false, false, false, false, false
                };

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit[columnIndex];
                }
            });

        } else if (this.criterioCBox.getSelectedItem().toString().equals("adimplentes")) {
            List<Cliente> clientes = cadastro.dao.consultarAdimplentes();
            String imc = "--";
            String[][] resultado = new String[clientes.size()][5];
            for (int i = 0; i < clientes.size(); i++) {
                    try{
                        imc = clientes.get(i).getCondicionamentoFisico().getComposicaoCorporal().getImc().toString();
                    }catch(Exception e){
                        System.out.println(e.getMessage());
                        imc = "--";
                    }
            
                   resultado[i] = new String[]{clientes.get(i).getId().toString(), clientes.get(i).getNome(), imc, clientes.get(i).getSituacaoFinanceira(), clientes.get(i).getIdade().toString()};
            }
            this.buscaTable.setModel(new javax.swing.table.DefaultTableModel(
                    resultado,
                    new String[]{
                        "ID", "Nome", "IMC", "S.Financeira", "Idade"
                    }
            ) {
                boolean[] canEdit = new boolean[]{
                    false, false, false, false, false
                };

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit[columnIndex];
                }
            });
        } else if (this.criterioCBox.getSelectedItem().toString().equals("inadimplentes")) {
            List<Cliente> clientes = cadastro.dao.consultarInadimplentes();
            String[][] resultado = new String[clientes.size()][5];
            String imc = "--";
            for (int i = 0; i < clientes.size(); i++) {
                try {
                    imc = clientes.get(i).getCondicionamentoFisico().getComposicaoCorporal().getImc().toString();
                }catch(Exception e) {
                    System.out.println(e.getMessage());
                    imc = "--";
                }
                resultado[i] = new String[]{clientes.get(i).getId().toString(), clientes.get(i).getNome(), imc, clientes.get(i).getSituacaoFinanceira(), clientes.get(i).getIdade().toString()};
            }
            this.buscaTable.setModel(new javax.swing.table.DefaultTableModel(
                    resultado,
                    new String[]{
                        "ID", "Nome", "IMC", "S.Financeira", "Idade"
                    }
            ) {
                boolean[] canEdit = new boolean[]{
                    false, false, false, false, false
                };

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit[columnIndex];
                }
            });
        } else if (this.criterioCBox.getSelectedItem().toString().equals("peso ideal")) {
            List<Cliente> clientes = cadastro.dao.consultarPesoIdeal();
            String[][] resultado = new String[clientes.size()][5];
            for (int i = 0; i < clientes.size(); i++) {

                resultado[i] = new String[]{clientes.get(i).getId().toString(), clientes.get(i).getNome(), clientes.get(i).getCondicionamentoFisico().getComposicaoCorporal().getImc().toString(), clientes.get(i).getSituacaoFinanceira(), clientes.get(i).getIdade().toString()};
            }
            this.buscaTable.setModel(new javax.swing.table.DefaultTableModel(
                    resultado,
                    new String[]{
                        "ID", "Nome", "IMC", "S.Financeira", "Idade"
                    }
            ) {
                boolean[] canEdit = new boolean[]{
                    false, false, false, false, false
                };

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit[columnIndex];
                }
            });
        } else if (this.criterioCBox.getSelectedItem().toString().equals("abaixo do peso")) {
            List<Cliente> clientes = cadastro.dao.consultarAbaixoDoPeso();
            String[][] resultado = new String[clientes.size()][5];
            for (int i = 0; i < clientes.size(); i++) {

                resultado[i] = new String[]{clientes.get(i).getId().toString(), clientes.get(i).getNome(), clientes.get(i).getCondicionamentoFisico().getComposicaoCorporal().getImc().toString(), clientes.get(i).getSituacaoFinanceira(), clientes.get(i).getIdade().toString()};
            }
            this.buscaTable.setModel(new javax.swing.table.DefaultTableModel(
                    resultado,
                    new String[]{
                        "ID", "Nome", "IMC", "S.Financeira", "Idade"
                    }
            ) {
                boolean[] canEdit = new boolean[]{
                    false, false, false, false, false
                };

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit[columnIndex];
                }
            });
        } else if (this.criterioCBox.getSelectedItem().toString().equals("sobrepeso")) {
            List<Cliente> clientes = cadastro.dao.consultarSobrePeso();
            String[][] resultado = new String[clientes.size()][5];
            for (int i = 0; i < clientes.size(); i++) {

                resultado[i] = new String[]{clientes.get(i).getId().toString(), clientes.get(i).getNome(), clientes.get(i).getCondicionamentoFisico().getComposicaoCorporal().getImc().toString(), clientes.get(i).getSituacaoFinanceira(), clientes.get(i).getIdade().toString()};
            }
            this.buscaTable.setModel(new javax.swing.table.DefaultTableModel(
                    resultado,
                    new String[]{
                        "ID", "Nome", "IMC", "S.Financeira", "Idade"
                    }
            ) {
                boolean[] canEdit = new boolean[]{
                    false, false, false, false, false
                };

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit[columnIndex];
                }
            });
        } else if (this.criterioCBox.getSelectedItem().toString().equals("obesidade 1")) {
            List<Cliente> clientes = cadastro.dao.consultarObesidadeI();
            String[][] resultado = new String[clientes.size()][5];
            for (int i = 0; i < clientes.size(); i++) {

                resultado[i] = new String[]{clientes.get(i).getId().toString(), clientes.get(i).getNome(), clientes.get(i).getCondicionamentoFisico().getComposicaoCorporal().getImc().toString(), clientes.get(i).getSituacaoFinanceira(), clientes.get(i).getIdade().toString()};
            }
            this.buscaTable.setModel(new javax.swing.table.DefaultTableModel(
                    resultado,
                    new String[]{
                        "ID", "Nome", "IMC", "S.Financeira", "Idade"
                    }
            ) {
                boolean[] canEdit = new boolean[]{
                    false, false, false, false, false
                };

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit[columnIndex];
                }
            });
        } else if (this.criterioCBox.getSelectedItem().toString().equals("obesidade 2")) {
            List<Cliente> clientes = cadastro.dao.consultarObsidadeII();
            String[][] resultado = new String[clientes.size()][5];
            for (int i = 0; i < clientes.size(); i++) {

                resultado[i] = new String[]{clientes.get(i).getId().toString(), clientes.get(i).getNome(), clientes.get(i).getCondicionamentoFisico().getComposicaoCorporal().getImc().toString(), clientes.get(i).getSituacaoFinanceira(), clientes.get(i).getIdade().toString()};
            }
            this.buscaTable.setModel(new javax.swing.table.DefaultTableModel(
                    resultado,
                    new String[]{
                        "ID", "Nome", "IMC", "S.Financeira", "Idade"
                    }
            ) {
                boolean[] canEdit = new boolean[]{
                    false, false, false, false, false
                };

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit[columnIndex];
                }
            });
        } else if (criterioCBox.getSelectedItem().toString().equals("obesidade 3")) {
            List<Cliente> clientes = cadastro.dao.consultarObesidadeIII();
            String[][] resultado = new String[clientes.size()][5];
            for (int i = 0; i < clientes.size(); i++) {

                resultado[i] = new String[]{clientes.get(i).getId().toString(), clientes.get(i).getNome(), clientes.get(i).getCondicionamentoFisico().getComposicaoCorporal().getImc().toString(), clientes.get(i).getSituacaoFinanceira(), clientes.get(i).getIdade().toString()};
            }
            this.buscaTable.setModel(new javax.swing.table.DefaultTableModel(
                    resultado,
                    new String[]{
                        "ID", "Nome", "IMC", "S.Financeira", "Idade"
                    }
            ) {
                boolean[] canEdit = new boolean[]{
                    false, false, false, false, false
                };

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit[columnIndex];
                }
            });
        }


    }//GEN-LAST:event_buscarButtonActionPerformed

    private void criterioCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_criterioCBoxActionPerformed
        // TODO add your handling code here:
        if (this.criterioCBox.getSelectedItem().toString().equals("nome") || this.criterioCBox.getSelectedItem().toString().equals("id")) {
            this.buscaTField.setEnabled(true);
        } else {
            this.buscaTField.setEnabled(false);
        }

    }//GEN-LAST:event_criterioCBoxActionPerformed

    private void buscaTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buscaTableMouseClicked
        // TODO add your handling code here:
        int linha = this.buscaTable.getSelectedRow();
        PainelClienteEditarCondição indices = new PainelClienteEditarCondição(Long.valueOf(this.buscaTable.getValueAt(linha, 0).toString()));

        indices.setVisible(true);

    }//GEN-LAST:event_buscaTableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PainelConsultaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PainelConsultaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PainelConsultaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PainelConsultaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PainelConsultaCliente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel buscaLabel;
    private javax.swing.JScrollPane buscaPane;
    private javax.swing.JTextField buscaTField;
    private javax.swing.JTable buscaTable;
    private javax.swing.JButton buscarButton;
    private javax.swing.JPanel consultaPanel;
    private javax.swing.JComboBox<String> criterioCBox;
    private javax.swing.JLabel criterioLabel;
    private javax.swing.JLabel headerLabel;
    private javax.swing.JLabel image;
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables
}
